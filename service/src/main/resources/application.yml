spring:
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQL95Dialect
  profiles:
    active: dev-postgres
  mvc:
    contentnegotiation:
      favor-parameter: true
      parameter-name: format
  servlet:
    multipart:
      # See also .ebextensions/nginx/conf.d/02_max_upload_size.conf
      max-file-size: 10MB
      max-request-size: 11MB
  web:
    resources:
      cache:
        cachecontrol:
          # Value, in seconds, Spring Security specifies for static resources' Cache-Control max-age
          max-age: 28800
logging:
  level:
    root: INFO
server:
  compression:
    enabled: true
    mime-types: text/plain,text/css,text/javascript,application/javascript
    min-response-size: 2048
  tomcat:
    # Required for https logout redirects to work on AWS:
    # https://stackoverflow.com/questions/10385977/https-login-with-spring-security-redirects-to-http
    remote-ip-header: x-forwarded-for
    protocol-header: x-forwarded-proto

---

spring:
  config:
    activate:
      on-profile: dev,test
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    # Wait for Hibernate to initialize schema before running data-h2.sql
    # https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.5-Release-Notes#new-and-noteworthy
    defer-datasource-initialization: true
  datasource:
    url: jdbc:h2:mem:test
    driverClassName: org.h2.Driver
    username: sa
    password:
  sql:
    init:
      # platform needed to load data-h2.sql
      platform: h2
rak:
  login:
    user: kinaseadmin
    password: password
logging:
  level:
    org.sgc: DEBUG

---

# Development is done with a local copy of the Postgres database.
spring:
  config:
    activate:
      on-profile: dev-postgres
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    driverClassName: org.postgresql.Driver
    username: postgres
    password: postgres
rak:
  login:
    user: kinaseadmin
    password: password
logging:
  level:
    org.sgc: DEBUG

---

# RDS_* environment variables defined in AWS console, ${PORT} set magically (typically 5000)
spring:
  config:
    activate:
      on-profile: production
  datasource:
    url: jdbc:postgresql://${RDS_HOSTNAME}:${RDS_PORT}/${RDS_DB_NAME}
    driverClassName: org.postgresql.Driver
    username: ${RDS_USERNAME}
    password: ${RDS_PASSWORD}
server:
  port: ${PORT}
