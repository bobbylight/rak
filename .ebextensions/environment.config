# Most or all of this is to enable https in a single instance EB deploy (AWS doc only talks about
# doing so with a load balancer which costs money).
# See https://gist.github.com/tony-gutierrez/198988c34e020af0192bab543d35a62a and its discussion
# Had to resort to the last comment here:  https://forums.aws.amazon.com/thread.jspa?threadID=275358
# In short, copy nginx config into proper directory in post-deploy hook.

Resources:
  # Allow traffic on port 443.
  sslSecurityGroupIngress: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      CidrIp: 0.0.0.0/0

files:
  # Redirect http traffic to https
  /home/ec2-user/000_http_redirect_custom.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
        listen 80;
        server_name randomactsofkinase.org www.randomactsofkinase.org;
        return 301 https://randomactsofkinase.org;
      }

  # SSL configuration
  /home/ec2-user/001_https_custom.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      # HTTPS server
      server {
        listen       443 default ssl;
        server_name  localhost;
        error_page  497 https://$host$request_uri;
        
        ssl_certificate      /etc/letsencrypt/live/ebcert/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/ebcert/privkey.pem;

        ssl_session_timeout  5m;
        ssl_protocols  TLSv1.1 TLSv1.2;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_prefer_server_ciphers   on;

        location / {
          proxy_pass http://localhost:5000;
          proxy_http_version 1.1;

          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
      }

  # gzip response criteria
  /home/ec2-user/002_gzip.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      gzip on;
      gzip_proxied any;
      gzip_types application/javascript application/x-javascript application/xml text/javascript text/plain text/css text/xml;
      gzip_min_length 1000;

  # Max upload size
  /home/ec2-user/003_max_upload_size.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      # Aligns with vlaue in application.yml
      client_max_body_size 11M;

  # Script to move our nginx conf files into the proper directory abd restart after the deploy completes
  # We must do this in a post-deploy step since EB overwrites the nginx config files after running container_commands
  /opt/elasticbeanstalk/hooks/appdeploy/post/update-nginx-config.sh:
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh
      echo "Copying nginx config files from /home/ec2-user to /etc/nginx/conf.d/ ..."
      cp /home/ec2-user/0*.conf /etc/nginx/conf.d/
      echo "Resrtarting nginx to pick up the new config ..."
      sudo service nginx restart

packages:
  yum:
    epel-release: []

container_commands:
  00_create_dir:
    command: "mkdir -p /opt/certbot"
  10_installcertbotandchmod:
    command: "wget https://dl.eff.org/certbot-auto -O /opt/certbot/certbot-auto;chmod a+x /opt/certbot/certbot-auto"
  20_getcert:
    command: "sudo /opt/certbot/certbot-auto certonly --standalone --debug --non-interactive --email ${EMAIL} --agree-tos --domains ${CERT_DOMAIN} \
    -d www.${CERT_DOMAIN} \
    --expand --renew-with-new-domains --pre-hook \"service nginx stop\""
  30_link:
    command: "sudo ln -sf /etc/letsencrypt/live/${CERT_DOMAIN} /etc/letsencrypt/live/ebcert"
  #40_config:
    #command: "mv /etc/nginx/conf.d/001_https_custom.pre /etc/nginx/conf.d/001_https_custom.conf"
    #command: "mv /etc/nginx/conf.d/001_https_custom.pre /var/elasticbeanstalk/staging/nginx/conf.d/001_https_custom.conf"
  50_restartnginx:
    command: "sudo service nginx restart"
  60_cronjobsetrenewal:
    command: '(crontab -l ; echo ''0 6 * * * root /opt/certbot/certbot-auto renew --standalone --pre-hook "service nginx stop" --post-hook "service nginx start" --force-renew'') | crontab -'
